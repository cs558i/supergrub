# Super Grub Disk - osdetect-hurd.cfg
# Copyright (C) 2024 Adrian Gibanel Lopez.
#
# Super Grub Disk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Super Grub Disk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Super Grub Disk.  If not, see <http://www.gnu.org/licenses/>.

set option_title=$"Hurd"


# Function: hurd_minus_one
# Saves into $1 variable the $2 associated hard disk (minus one)
# From 1 to 64
# Input example: 16
# Output example: 15
function hurd_minus_one {

  number_to_substract=$2
  result=$2

  if test $number_to_substract = '1'; then
    result='0'
  elif test $number_to_substract = '2'; then
    result='1'
  elif test $number_to_substract = '3'; then
    result='2'
  elif test $number_to_substract = '4'; then
    result='3'
  elif test $number_to_substract = '5'; then
    result='4'
  elif test $number_to_substract = '6'; then
    result='5'
  elif test $number_to_substract = '7'; then
    result='6'
  elif test $number_to_substract = '8'; then
    result='7'
  elif test $number_to_substract = '9'; then
    result='8'
  elif test $number_to_substract = '10'; then
    result='9'
  elif test $number_to_substract = '11'; then
    result='10'
  elif test $number_to_substract = '12'; then
    result='11'
  elif test $number_to_substract = '13'; then
    result='12'
  elif test $number_to_substract = '14'; then
    result='13'
  elif test $number_to_substract = '15'; then
    result='14'
  elif test $number_to_substract = '16'; then
    result='15'
  elif test $number_to_substract = '17'; then
    result='16'
  elif test $number_to_substract = '18'; then
    result='17'
  elif test $number_to_substract = '19'; then
    result='18'
  elif test $number_to_substract = '20'; then
    result='19'
  elif test $number_to_substract = '21'; then
    result='20'
  elif test $number_to_substract = '22'; then
    result='21'
  elif test $number_to_substract = '23'; then
    result='22'
  elif test $number_to_substract = '24'; then
    result='23'
  elif test $number_to_substract = '25'; then
    result='24'
  elif test $number_to_substract = '26'; then
    result='25'
  elif test $number_to_substract = '27'; then
    result='26'
  elif test $number_to_substract = '28'; then
    result='27'
  elif test $number_to_substract = '29'; then
    result='28'
  elif test $number_to_substract = '30'; then
    result='29'
  elif test $number_to_substract = '31'; then
    result='30'
  elif test $number_to_substract = '32'; then
    result='31'
  elif test $number_to_substract = '33'; then
    result='32'
  elif test $number_to_substract = '34'; then
    result='33'
  elif test $number_to_substract = '35'; then
    result='34'
  elif test $number_to_substract = '36'; then
    result='35'
  elif test $number_to_substract = '37'; then
    result='36'
  elif test $number_to_substract = '38'; then
    result='37'
  elif test $number_to_substract = '39'; then
    result='38'
  elif test $number_to_substract = '40'; then
    result='39'
  elif test $number_to_substract = '41'; then
    result='40'
  elif test $number_to_substract = '42'; then
    result='41'
  elif test $number_to_substract = '43'; then
    result='42'
  elif test $number_to_substract = '44'; then
    result='43'
  elif test $number_to_substract = '45'; then
    result='44'
  elif test $number_to_substract = '46'; then
    result='45'
  elif test $number_to_substract = '47'; then
    result='46'
  elif test $number_to_substract = '48'; then
    result='47'
  elif test $number_to_substract = '49'; then
    result='48'
  elif test $number_to_substract = '50'; then
    result='49'
  elif test $number_to_substract = '51'; then
    result='50'
  elif test $number_to_substract = '52'; then
    result='51'
  elif test $number_to_substract = '53'; then
    result='52'
  elif test $number_to_substract = '54'; then
    result='53'
  elif test $number_to_substract = '55'; then
    result='54'
  elif test $number_to_substract = '56'; then
    result='55'
  elif test $number_to_substract = '57'; then
    result='56'
  elif test $number_to_substract = '58'; then
    result='57'
  elif test $number_to_substract = '59'; then
    result='58'
  elif test $number_to_substract = '60'; then
    result='59'
  elif test $number_to_substract = '61'; then
    result='60'
  elif test $number_to_substract = '62'; then
    result='61'
  elif test $number_to_substract = '63'; then
    result='62'
  elif test $number_to_substract = '64'; then
    result='63'
  fi

  $1=$result
  export $1

}

# Function: hurd_get_hard_disk
# Saves into $1 variable the $2 associated hard disk
# Input example: device hd0,msdos1
# Output example: hd0
function hurd_get_hard_disk {

  insmod regexp
  regexp -s hard_disk_portion '(.*),.*' $2
  regexp -s hard_disk_number '[^0-9]*([0-9]*)' $hard_disk_portion
  rmmod regexp

  if test $hard_disk_number = "0"; then
    $1="hd""$hard_disk_number"
  else
    if withplatform bios ; then
      hurd_minus_one hard_disk_number_one $hard_disk_number
      $1="hd""$hard_disk_number_one"
    else
      $1="hd""$hard_disk_number"
    fi
  fi

  export $1

}

# Function: hurd_get_partition_number
# Saves into $1 variable the $2 associated hurd partition number
# Input example: device hd0,msdos1
# Output example: 1
function hurd_get_partition_number {

  insmod regexp
  regexp -s $1 '.*,[^0-9]*([0-9]*)' $2
  rmmod regexp
  export $1

}

function hurd_entry_add {
  set device="$1"
  set gnumach="$2"
  set gnumach_version="$3"
  set hurdcmdline="$4"
  set hurdlabel="$5"

  hurd_get_hard_disk hurd_hard_disk "$device"
  hurd_get_partition_number hurd_partition_number "$device"

  if test "$hurdcmdline" = ""; then
    menuentry_title="${finaloption_tab_str}Hurd ( GNU Mach ${gnumach_version} ) ($device)"
  else
    menuentry_title="${finaloption_tab_str}    ... ( $hurdlabel )"
  fi

  flagplatform bios
  menuentry "${menuentry_title}" "$device" "$hurdcmdline" {
    set root="$2"
    set hurdcmdline="$3"

    multiboot $gnumach root=part:${hurd_partition_number}:device:$hurd_hard_disk $hurdcmdline

    echo 'Loading the Hurd ...'
    module     /hurd/acpi.static acpi \
      --host-priv-port='${host-port}' --device-master-port='${device-port}' \
      --next-task='${pci-task}' \
      '$(acpi-task=task-create)' '$(task-resume)'
    module     /hurd/pci-arbiter.static pci-arbiter \
      \
      --next-task='${disk-task}' \
      '$(pci-task=task-create)'
    module     /hurd/rumpdisk.static rumpdisk \
      \
      --next-task='${fs-task}' \
      '$(disk-task=task-create)'
    module /hurd/ext2fs.static ext2fs --readonly \
      --multiboot-command-line='${kernel-command-line}' \
      \
      --exec-server-task='${exec-task}' -T typed '${root}' \
      '$(fs-task=task-create)'
    module /lib/ld.so.1 exec /hurd/exec '$(exec-task=task-create)'

  }

}

function run_option {

  source "${sg2d_directory}/tools.cfg"

  if [ "$1" = "osdetect" ] ; then
    run_option_osdetect_mode="TRUE"
  else
    run_option_osdetect_mode="FALSE"
  fi

  if [ "${run_option_osdetect_mode}" = "FALSE" ] ; then
    update_sg2d_devices
    devices_to_loop="${sg2d_devices}"
  else
    update_osdetect_devices
    devices_to_loop="${osdetect_devices}"
  fi

  osdetect_exclusive_devices=""
  exclusive_device_os="TRUE"

  os_found="false"

  set saved_root=$root

  for dev in ${devices_to_loop}; do
    getdevice device $dev

    # $fstype: filesystem type identified
    probe -s fstype -f $dev
    # uuid: filesystem UUID
    probe -s uuid -u $dev

    insmod regexp

    for file in ($device)/boot/gnumach-*.gz; do
      if test -f $file; then

        os_found="true"

        # If this an exclusive device OS...
        # we know there is not going to be another OS in the same partition
        # so we add it to the osdetect_exclusive_devices variable
        if [ "${exclusive_device_os}" = "TRUE" ] ; then
          osdetect_exclusive_devices="${osdetect_exclusive_devices} ${dev}"
        fi

        path_title "$dev" "$dev" "$fstype"

        kernel_regexp='\('"$device"'\)(/boot/gnumach-(.*).gz)'
        regexp -s 1:gnumach_file -s 2:version $kernel_regexp $file

        hurd_entry_add "$device" "${gnumach_file}" "$version" "" ""
        hurd_entry_add "$device" "${gnumach_file}" "$version" "-s" "recovery mode"
      fi
    done

    rmmod regexp

  done

  if [ "$os_found" != "true" ]; then
    menuentry "${finaloption_tab_str}"$"(Not detected)" {
      sleep 1
    }
  fi

  export osdetect_exclusive_devices

  set root=$saved_root


}
